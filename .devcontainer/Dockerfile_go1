# we build this docker based on a docker with ros already installed
FROM ros:noetic-perception-focal

LABEL maintainer="jrap.udg@gmail.com"
ENV REFRESH_AT 2023-02-f

ARG USE_PROC=1
RUN echo "USE_PROC=${USE_PROC}"

# fixed a key issue using the method mentioned in https://github.com/PRBonn/bonnetal/commit/0ab883b8356954c3e57a07a73c30bbac8f035a05
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' && \
    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \
    apt update 


# install necessary dependencies 
RUN apt-get update && apt-get install -y \
    vim \
    libatlas-base-dev \
    libeigen3-dev \
    libgoogle-glog-dev \
    libsuitesparse-dev \
    python3-catkin-tools python3-osrf-pycommon \
    python3-matplotlib \
    gfortran \
    autoconf \
    git \
    coinor-libipopt-dev \
    curl \
    libopenmpi-dev \
    apt-utils \
    software-properties-common \
    build-essential \
    libssl-dev \
    wget \
    openssh-client \
    ros-${ROS_DISTRO}-cv-bridge \
    ros-${ROS_DISTRO}-rviz \
    ros-${ROS_DISTRO}-robot-state-publisher \
    ros-${ROS_DISTRO}-image-transport \
    ros-${ROS_DISTRO}-message-filters \
    ros-${ROS_DISTRO}-tf \
    zsh \
    ros-${ROS_DISTRO}-ros-control \
    ros-${ROS_DISTRO}-gazebo-ros \
    ros-${ROS_DISTRO}-gazebo-ros-pkgs \
    ros-${ROS_DISTRO}-gazebo-ros-control \
    ros-${ROS_DISTRO}-joy \
    ros-${ROS_DISTRO}-ros-controllers \
    ros-${ROS_DISTRO}-plotjuggler \
    ros-${ROS_DISTRO}-plotjuggler-ros  \
    ros-${ROS_DISTRO}-interactive-markers \
    ros-${ROS_DISTRO}-roslint \
    ros-${ROS_DISTRO}-rqt-controller-manager \
    ros-${ROS_DISTRO}-xacro \
    clang-format \
    clang-tidy

# ocs2 dependencies
RUN sudo apt-get update \
    && sudo apt-get install -y libglpk-dev ros-${ROS_DISTRO}-pybind11-catkin \
    liburdfdom-dev liboctomap-dev libassimp-dev doxygen doxygen-latex

# install python 3.8 but do not break python 2.7 otherwise ros will break
RUN apt-get update && \
    apt-get install -y python3.8 python3.8-dev ipython3

RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1 && \
    curl https://bootstrap.pypa.io/pip/3.8/get-pip.py -o get-pip.py && \
    python3 get-pip.py && \
    rm get-pip.py && \
    pip3 --version

# change timezone (this is very important otherwise many ROS topic time will be strange)
ENV TZ=America/New_York
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# # add OSQP 
# # follow https://osqp.org/docs/get_started/sources.html#build-from-sources to install OSQP from sources
# WORKDIR /tmp
# RUN git clone --recursive https://github.com/oxfordcontrol/osqp
# WORKDIR /tmp/osqp
# RUN mkdir build 
# WORKDIR /tmp/osqp/build
# RUN cmake -G "Unix Makefiles" ..  && \
#     cmake --build .  && \
#     cmake --build . --target install

# # add OSQP-python
# RUN pip install osqp && \
#     apt-get install -y ipython3 wget

# # add osqp-eigen
# WORKDIR /tmp
# RUN git clone https://github.com/robotology/osqp-eigen.git
# WORKDIR /tmp/osqp-eigen
# RUN mkdir build 
# WORKDIR /tmp/osqp-eigen/build
# RUN cmake ../  && \
#     make  && \
#     make install


###################  configuration specific to the docker user  ###################################
# create a non-root user
ARG USERNAME=ControlUser
ARG USER_UID=1000
ARG USER_GID=$USER_UID

# Create the user
RUN groupadd --gid $USER_GID $USERNAME \
    && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \
    #
    # [Optional] Add sudo support. Omit if you don't need to install software after connecting.
    && apt-get update \
    && apt-get install -y sudo \
    && echo $USERNAME ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/$USERNAME \
    && chmod 0440 /etc/sudoers.d/$USERNAME

# [Optional] Set the default user. Omit if you want to keep the default as root.

USER $USERNAME

# make unitree workspace
ENV SUPPORT_WS=/home/${USERNAME}/support_files
ENV UNITREE_WS=/home/${USERNAME}/unitree_ws
ENV LEGGED_WS=/home/${USERNAME}/legged_ctrl_ws

RUN mkdir -p $SUPPORT_WS 
RUN mkdir -p $UNITREE_WS/src
WORKDIR $UNITREE_WS
RUN /bin/zsh -c "source /opt/ros/${ROS_DISTRO}/setup.zsh; catkin init;"
# install unitree sdk dependencies
WORKDIR $SUPPORT_WS
RUN git clone https://github.com/lcm-proj/lcm.git && \
    cd ${SUPPORT_WS}/lcm && \
    git checkout tags/v1.4.0 && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j${USE_PROC} && \
    sudo make install 

# notice we must use v3.8 for go1 
# notice we must use v3.2 for a1 
ENV UNITREE_SDK_VERSION=3_8
WORKDIR $SUPPORT_WS
RUN git clone https://github.com/unitreerobotics/unitree_legged_sdk.git && \
    cd ${SUPPORT_WS}/unitree_legged_sdk && git checkout v3.8.0 && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j${USE_PROC} 

WORKDIR $SUPPORT_WS
RUN git clone --depth 1 https://github.com/unitreerobotics/aliengo_sdk.git && \
    cd ${SUPPORT_WS}/aliengo_sdk && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j${USE_PROC}     

WORKDIR $UNITREE_WS/src
RUN git clone --depth 1 https://github.com/ShuoYangRobotics/unitree_ros.git
WORKDIR $UNITREE_WS
# there are some non ascii code in this file that prevents docker from catkin build the file
# RUN perl -pi -e 's/[^[:ascii:]]//g' $UNITREE_WS/src/unitree_ros/unitree_legged_msgs/msg/MotorState.msg 
# RUN perl -pi -e 's/[^[:ascii:]]//g' $UNITREE_WS/src/unitree_ros/unitree_legged_msgs/msg/MotorState.msg 
ENV UNITREE_LEGGED_SDK_PATH=${SUPPORT_WS}/unitree_legged_sdk
ENV ALIENGO_SDK_PATH=${SUPPORT_WS}/aliengo_sdk
ENV UNITREE_PLATFORM=amd64
# compile just unitree ros unitree_legged_msgs
RUN ls $UNITREE_WS/src/unitree_ros && \
    /bin/zsh -c "source /opt/ros/${ROS_DISTRO}/setup.zsh; catkin build unitree_legged_msgs;"


# casadi 
WORKDIR $SUPPORT_WS
RUN git clone https://github.com/casadi/casadi.git && \
    cd ${SUPPORT_WS}/casadi && git checkout tags/3.5.5 && \
    mkdir ${SUPPORT_WS}/casadi/build && cd ${SUPPORT_WS}/casadi/build && \
    cmake -DWITH_CPLEX=OFF -DWITH_KNITRO=OFF -DWITH_OOQP=OFF -DWITH_SNOPT=OFF ${SUPPORT_WS}/casadi && \
    make -j${USE_PROC} && \
    sudo make install
# /usr/local/lib/casadi/
# /usr/local/include/casadi

# filter for 
WORKDIR $SUPPORT_WS
RUN git clone https://github.com/ShuoYangRobotics/gram_savitzky_golay.git
WORKDIR ${SUPPORT_WS}/gram_savitzky_golay 
RUN git submodule init && \
    git submodule update && \
    mkdir build 
WORKDIR ${SUPPORT_WS}/gram_savitzky_golay/build
RUN cmake -DCMAKE_BUILD_TYPE=Release ../ && \
    make -j${USE_PROC} && sudo make install

# install ocs2 

ENV OCS2_WS=/home/${USERNAME}/ocs2_ws
RUN mkdir -p $OCS2_WS/src
WORKDIR $OCS2_WS/src
RUN git clone https://github.com/leggedrobotics/ocs2.git && git clone --depth 1 https://github.com/leggedrobotics/pinocchio.git
WORKDIR $OCS2_WS/src/pinocchio
RUN git submodule init && git submodule update --depth 1
WORKDIR $OCS2_WS/src
RUN git clone --depth 1 https://github.com/leggedrobotics/hpp-fcl.git  
WORKDIR $OCS2_WS/src/hpp-fcl
RUN git submodule init && git submodule update --depth 1
WORKDIR $OCS2_WS/src
RUN git clone https://github.com/leggedrobotics/ocs2_robotic_assets.git

RUN sudo apt install -y liburdfdom-dev liboctomap-dev libassimp-dev ros-${ROS_DISTRO}-eiquadprog
WORKDIR $OCS2_WS
RUN /bin/zsh -c "source ${UNITREE_WS}/devel/setup.zsh; catkin config -DCMAKE_BUILD_TYPE=RelWithDebInfo; catkin build ocs2_legged_robot_ros ocs2_self_collision_visualization"


ENV CATKIN_WS=/home/${USERNAME}/legged_ctrl_ws
RUN mkdir -p $CATKIN_WS/src
# final 

RUN sh -c "$(wget -O- https://github.com/deluan/zsh-in-docker/releases/download/v1.1.4/zsh-in-docker.sh)" -- \
    -t robbyrussell \
    -p git \
    -p ssh-agent

RUN echo "export ROS_MASTER_URI=http://localhost:11311;export ROS_IP=localhost;export ROS_HOSTNAME=localhost" >> ~/.zshrc && \
    echo "#unitree config" >> ~/.zshrc && \
    echo "export export UNITREE_SDK_VERSION=${UNITREE_SDK_VERSION}" >> ~/.zshrc && \
    echo "export UNITREE_LEGGED_SDK_PATH=${SUPPORT_WS}/unitree_legged_sdk" >> ~/.zshrc && \
    echo "export ALIENGO_SDK_PATH=${SUPPORT_WS}/aliengo_sdk" >> ~/.zshrc && \
    echo "export UNITREE_PLATFORM=\"amd64\"" >> ~/.zshrc
  
RUN echo "export ROBOT_TYPE=go1" >> ~/.zshrc
     
# install cmake tools 
WORKDIR $SUPPORT_WS
RUN git clone https://github.com/ANYbotics/cmake_clang_tools.git
RUN cd cmake_clang_tools && mkdir -p build && cd build && cmake ../ && make && sudo make install

# Build legged_ctrl_ws before sourcing it in .zshrc
# WORKDIR $LEGGED_WS
# RUN /bin/zsh -c "\
#     source ${OCS2_WS}/devel/setup.zsh && \
#     catkin config -DCMAKE_BUILD_TYPE=Release && \
#     catkin build \
# "
# Only after it has been built, add it to .zshrc
RUN echo "source ${LEGGED_WS}/devel/setup.zsh" >> ~/.zshrc
# config zsh 

# WORKDIR ${LEGGED_WS}/src
# RUN pip install -e .

WORKDIR $LEGGED_WS

CMD ["/bin/zsh"]
ENV SHELL /bin/zsh